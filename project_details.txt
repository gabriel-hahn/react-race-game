Primeiramente, tenho que admitir que achei bem divertido fazer este projeto, pois desenvolver jogos de corrida sempre foram minhas ideias iniciais na faculdade ao aprender C ou Java (desenvolvi um jogo de corrida em cada linguagem), além de ser uma maneira bem diferente de aplicar os conceitos de desenvolvimento web.

Visão geral:

O jogo se baseia em dirigir um fusca azul, desviando dos obstáculos e sobreviver até o final de 10 laps. Para isso, você só
pode colidir uma vez com algum obstáculo, pois na segunda vez o seu carro quebra e você perde o jogo.

Comandos:

Esc ou Spacebar: Pausa o jogo.
A ou Seta para esquerda: Move o carro para a pista da esquerda.
S ou Seta para cima: Move o carro para a pista do meio.
D ou Seta para direita: Move o carro para a pista da direita.

Tecnologias:

Utilizei React como library principal, pois é a ferramenta para desenvolvimento Web que possuo maior conhecimento e a mesma que a Upnid utiliza. O mesmo referente ao GraphQL e Styled Components :)
Considerando o tamanho do projeto e suas features, decidi usar a Context API para gerenciamento do estado central do game ao invés de Redux, basicamente para manter o projeto simples e não tentar complicar algo que não deveria ser complexo, sendo que tenho somente 'um modo' de jogo.
Para testes, utilizei a testing-library para algumas validações importantes como as ações que alteram o estado principal do projeto (final ou início do jogo, controle dos laps, vidas e etc) e se os componentes estavam refletindo corretamente o estado atual.

Em relação as imagens utilizadas, mantive o background e a image do carro que o desafio me propôs, com a intenção de alterar o .gif por imagens e manipular a velocidade do carro manualmente ao final do projeto caso sobrasse um tempo, interferindo também na criação de um turbo para o carro (aumentaria a velocidade que os sprites iriam atualizar, por exemplo). O mesmo aconteceu com o modo multiplayer, uma das últimas opções de implementação. Infelizmente não consegui desenvolver estes tópicos, porém esta anotado como ideia de uma implementação futura deste projeto, talvez deixe o jogo bem mais interessante :)

Utilizei GraphQL e NodeJS para salvar a pontuação dos jogadores e mostrar como se sairam os últimos que jogaram na tela de
'Pontuações' - mesmo que mostrando somente o nome, a quantidade de vidas que terminou o jogo e quantas voltas completou.

Obs: Lembrando que o projeto está em um server free do Heroku, então talvez demore algum tempo até subir o projeto na primeira
vez que for acessado.

Link: https://react-race-game.herokuapp.com/

Fico no aguardo do feedback técnico de vocês a respeito do projeto! Obrigado

